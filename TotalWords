import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class lab4 
{
	public static Text word=new Text("The Total number of words is:");
	
	public static IntWritable wcount= new IntWritable();
	public static int maxi=0;
	public static IntWritable c= new IntWritable();
	
	public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> 
    {
        int count=0;
        
        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException 
        {
            String[] line = value.toString().split(",");
            for (String lines : line) 
            {
            	count++;
            }
            c.set(count);
                     
        }
        
        public void cleanup(Context context) throws IOException, InterruptedException
        {
        	context.write(word, c);
        }
    }  
	
    public static void main(String[] args) throws Exception 
    {
        Configuration conf = new Configuration();
        Job job = new Job(conf, "TotalCount");
        job.setJarByClass(lab4.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        job.setMapperClass(Map.class);
        job.setNumReduceTasks(0);
        
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        job.waitForCompletion(true);

    }
