import java.io.IOException;
import java.util.TreeMap;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;

public class topk2
{
	public static class Map extends Mapper<LongWritable, Text,NullWritable,Text> 
	{
		public TreeMap<Integer, Text> salary = new TreeMap<Integer, Text>();
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException 
		{
			String[] line = value.toString().split(",");
			int i=Integer.parseInt(line[1]);
			
			salary.put(i,new Text(value));
			if (salary.size() > 10) 
	        {
	        	salary.remove(salary.firstKey());
	        }      
		}	
		protected void cleanup(Context context) throws IOException, InterruptedException 
		{
			for ( Text name : salary.values() ) 
				context.write(NullWritable.get(), name);
		}
	}
	public static class Reduce extends Reducer <NullWritable, Text, NullWritable, Text> 
	{ 	    
		public void reduce(NullWritable key, Iterable<Text> values, Context context) throws IOException, InterruptedException
		{
			TreeMap<Integer, Text> salary = new TreeMap< Integer, Text>();
		    for (Text value : values) 
		    {
		    	String line = value.toString();
			  	String[] elements=line.split(",");	  	      
			  	int  i= Integer.parseInt(elements[1]);
			  	salary.put(i, new Text(value));
			  	if (salary.size() > 10) 
			  	{
			  		salary.remove(salary.firstKey());
			  	}
			}
		    for (Text t : salary.values()) 
		    {
		    	context.write(NullWritable.get(), t);
		    }    
		}
	}  
   public static void main(String[] args) throws Exception
   {
	   Configuration conf = new Configuration();
	    Job job = new Job(conf, "wc");
	    job.setJarByClass(topk2.class);
	    job.setOutputKeyClass(NullWritable.class);
	    job.setOutputValueClass(Text.class);
	    job.setMapperClass(Map.class);
	    job.setNumReduceTasks(1);
	    job.setReducerClass(Reduce.class);
	    job.setInputFormatClass(TextInputFormat.class);
	    job.setOutputFormatClass(TextOutputFormat.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    job.waitForCompletion(true);
   }
}
